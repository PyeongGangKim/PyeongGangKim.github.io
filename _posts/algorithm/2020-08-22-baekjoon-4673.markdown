---
layout: post
title: (c++)백준 4673 
date: 2020-08-22 16:38:23 +0900
category: BOJ
tag: ['백준', '4673', 'c++']
---

백준 4673 셀프넘버
=====

### Problem 

**셀프 넘버**는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.

양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

n을 **d(n)**의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 

생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.   
   
      
### Input
없음   
     
### Output
10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 만들어라.
     
      
### Algorithm
d(n) 함수를 정의한다. d(n) 함수는 처음에 input 값으로 받는 함수를 저장하고, 그 수에 10으로 나눈 나머지를 더한다. 그리고 몫이 0이 될때까지 계속해서 나누고, 나머지를 더하는 것을 반복한다.    
10001개의 boolean 배열을 만들고, d(n) 함수에 1부터 10000까지에 수를 넣는다. 그리고 d(n)에서 얻은 수를 boolean 배열에서 true로 바꿔준다.     
boolean 배열에서 true가 아닌 값을 출력해준다.    

### code
```c++

#include <bits/stdc++.h>

using namespace std;

bool num[10001];

int d(int n){
    int result = n;
    int remain = 0;
    while(1){
        remain = n % 10;
        n /= 10;        
        result += remain;
        if(n == 0) break;
    }
    return result;
}

int main(){
    fill_n(num,10001,false);
    int result;
    for(int i = 1; i < 10001; i++){
        result = d(i);
        num[result] = true;
    }
    for(int i = 1; i < 10001; i++){
        if(num[i]==false) printf("%d\n",i);
    }
}
```